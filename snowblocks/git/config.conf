# Copyright (c) 2016-present Arctic Ice Studio <development@arcticicestudio.com>
# Copyright (c) 2016-present Sven Greb <development@svengreb.de>

# Project:    igloo
# Repository: https://github.com/arcticicestudio/igloo
# License:    MIT

# Global Git configuration.
# See:
#   1. https://git-scm.com/docs/git-config
#   2. https://git-scm.com/book/tr/v2/Customizing-Git-Git-Configuration#_colors_in_git
#   3. https://git-scm.com/docs/git-config#_conditional_includes
#   4. https://git-scm.com/docs/git-config#Documentation/git-config.txt---show-origin
#   5. https://github.com/dandavison/delta

[includeIf "gitdir:~/yggdrasil/"]
  path = ./includes/user-arcticicestudio.conf

[includeIf "gitdir:~/yggdrasil/svengreb/"]
  path = ./includes/user-svengreb.conf

[includeIf "gitdir:~/code/bitbucket/"]
  path = ./includes/user-arcticicestudio.conf

[includeIf "gitdir:~/code/bitfroest/"]
  path = ./includes/user-arcticicestudio.conf

[includeIf "gitdir:~/code/github/"]
  path = ./includes/user-arcticicestudio.conf

[includeIf "gitdir:~/code/github/repositories/communicode/"]
  path = ./includes/user-svengreb.conf

[includeIf "gitdir:~/code/gitlab/"]
  path = ./includes/user-arcticicestudio.conf

[includeIf "gitdir:~/code/incubator/"]
  path = ./includes/user-arcticicestudio.conf

[includeIf "gitdir:~/.igloo/"]
  path = ./includes/user-arcticicestudio.conf

[includeIf "gitdir:~/code/job/"]
  path = ./includes/user-job.conf

[core]
  repositoryFormatVersion = 0
  filemode = true
  bare = false
  logallrefupdates = true
  whitespace = tab-in-indent
  editor = vim
  pager = delta --highlight-removed --file-style="box" --commit-color="#88c0d0" --file-color="#8fbcbb" --hunk-color="#81a1c1" --minus-color="#8b454b" --minus-emph-color="#bf616a" --plus-color="#4c6584" --plus-emph-color="#5e81ac" --tabs="2" --theme="Nord"
  autocrlf = input

[commit]
  # Unfortunately Git doesn't support relative paths and environment variable expansion for this attribute.
  # Therefore the path must be absolute and "hardcoded" instead of either resolving `$XDG_CONFIG_HOME/git`
  # or specifying the path relative to the main configuration file.
  template = ~/.config/git/includes/templates/commit-github.txt
  status = false

[diff]
  tool = intellij
  compactionHeuristic = true

[difftool "intellij"]
  prompt = true
  cmd = idea diff $(cd $(dirname "$LOCAL") && pwd)/$(basename "$LOCAL") $(cd $(dirname "$REMOTE") && pwd)/$(basename "$REMOTE")

[interactive]
  diffFilter = delta --color-only --highlight-removed --file-style="box" --commit-color="#88c0d0" --file-color="#8fbcbb" --hunk-color="#81a1c1" --minus-color="#8b454b" --minus-emph-color="#bf616a" --plus-color="#4c6584" --plus-emph-color="#5e81ac" --theme="Nord"

[merge]
  tool = intellij
  ff = false

[mergetool "intellij"]
  keepBackup = false
  prompt = false
  trustExitCode = true
  cmd = idea merge $(cd $(dirname "$LOCAL") && pwd)/$(basename "$LOCAL") $(cd $(dirname "$REMOTE") && pwd)/$(basename "$REMOTE") $(cd $(dirname "$BASE") && pwd)/$(basename "$BASE") $(cd $(dirname "$MERGED") && pwd)/$(basename "$MERGED")

[push]
  default = current

[advice]
  pushNonFastForward = false
  statusHints = false
  resolveConflict = false

[help]
  # Run auto-corrected commands with 1 second delay after the info message has been shown.
  autocorrect = 10

[status]
  showUntrackedFiles = all

[color]
  branch = always
  diff = always
  grep = always
  pager = true
  showbranch = always
  status = always
  ui = always

[color "branch"]
  current = "white blue bold"
  local = "white bold"
  plain = "white"
  remote  = "blue bold"

[color "decorate"]
  branch = "blue bold"
  HEAD = "white bold ul"
  remoteBranch = "blue"
  stash = "yellow"
  tag = "cyan bold"

[color "diff"]
  commit = "blue bold"
  frag = "blue bold"
  func = "white"
  meta = "cyan"
  new = "green"
  old = "red"
  plain = "white"
  whitespace = "white reverse"

[color "diff-highlight"]
  oldNormal = "red bold"
  oldHighlight = "white red bold"
  newNormal = "green bold"
  newHighlight = "white green bold"

[color "grep"]
  context = "white"
  filename = "white dim ul"
  function = "white"
  linenumber = "white dim bold"
  match = "blue bold"
  selected = "white"
  separator = "white dim"

[color "interactive"]
  error = "red bold"
  header = "blue bold"
  help = "white dim"
  prompt = "cyan"

[color "status"]
  added = "green bold"
  changed = "yellow bold"
  header = "white ul"
  nobranch = "magenta bold ul"
  unmerged = "blue ul"
  untracked = "red bold"
  updated = "cyan bold"

[gui]
  commitmsgwidth = 72

[alias]
#+----------------------+
#+ Interaction - Branch +
#+----------------------+
  # Deletes all local branches based on the the specified gitflow branch prefix.
  #
  # Usage:
  #   git bclean <BRANCH>
  bclean = "!f() { git for-each-ref refs/heads/$1/* --format='%(refname)' | while read ref ; do branch=${ref#refs/heads/} ; git branch -d $branch ; done }; f"

  # Checks out into the specified branch.
  # Shortended checkout command.
  #
  # Usage:
  #   git co <BRANCH>
  co = checkout

  # Checks out into a new tracking branch using the specified name.
  #
  # Usage:
  #   git cob <BRANCH>
  cob = checkout -t -b

  # GitHub Pull Request Management
  # Creates a branch based on the specified GitHub Pull Request ID.
  # Default remote "origin" is used unless otherwise stated.
  #
  # Usage:
  #   git pr <GITHUB_PULL_REQUEST_ID> [REMOTE]
  # Examples:
  #   "git pr 4"         Creates a local branch "pr/4" from the default "origin" remote
  #   "git pr 4 remote"  Creates a local branch "pr/4" from the specified remote "remote"
  pr  = "!f() { git fetch -fu ${2:-origin} refs/pull/$1/head:pr/$1 && git checkout pr/$1; }; f"

  # GitHub Pull Request Management
  # Deletes all branches based on the specified GitHub Pull Request ID.
  # Default remote "origin" is used unless otherwise stated.
  #
  # Usage:
  #   git pr-clean
  # Examples:
  #   "git pr-clean" Removes all branches in "pr/*" from the local repository
  pr-clean = "!git for-each-ref refs/heads/pr/* --format='%(refname)' | while read ref ; do branch=${ref#refs/heads/} ; git branch -d $branch ; done"

  # +----------------------+
  # + Interaction - Commit +
  # +----------------------+
  # Adds all specified files to the stage and prints the status.
  #
  # Depends on:
  #   alias.s
  # Usage:
  #   git a <FILES>
  a = ! sh -c 'git add -- "$@" && git s' --

  # Adds all specified files interactively in patch mode to the stage and prints the status.
  #
  # Depends on:
  #   alias.s
  # Usage:
  #   git ap <FILES>
  ap = ! git add -p $@ && git s

  # Adds all unstaged- and untracked files to the stage and prints the status.
  #
  # Depends on:
  #   alias.s
  # Usage:
  #   git aa
  aa = ! git add . && git s

  # Commits all staged files.
  # Shortended commit command.
  #
  # Usage:
  #   git c
  c = commit

  # +---------------------+
  # + Interaction - Fetch +
  # +---------------------+
  # Fetches changes from all remotes and removes any remote-tracking references that no longer exists.
  #
  # Usage:
  #   git fa
  fa = fetch --all --prune
  
  # +----------------------------+
  # + Interaction - Format Patch +
  # +----------------------------+
  # Formats patches by removing printed ANSI color escape sequences and enables patch stats by default.
  #
  # Usage:
  #   git fp
  fp = diff --patch-with-stat --no-color

  # +---------------------+
  # + Interaction - Merge +
  # +---------------------+
  # Merges the specified branch in non-fast-forward mode with output about stats.
  #
  # See:
  #   https://help.github.com/en/articles/about-pull-request-merges
  # Usage:
  #   git m <BRANCH>
  m = merge --no-ff --stat

  # +---------------------+
  # + Interaction - Merge +
  # +---------------------+
  # "Squashes" and merges the specified branch in fast-forward (default) mode with output about stats.
  #
  # See:
  #   https://help.github.com/en/articles/about-pull-request-merges#squash-and-merge-your-pull-request-commits
  # Usage:
  #   git ms <BRANCH>
  ms = merge --ff --squash --stat

  # +--------------------+
  # + Interaction - Pull +
  # +--------------------+
  # Pulls changes from the specified remote in non-fast-forward mode and prunes all unreachable objects from the object
  # database.
  #
  # Usage:
  #   git pl <REMOTE>
  pl = ! git pull --no-ff --prune $@

  # Pulls changes from the specified remote in non-fast-forward mode, performs a rebase and prunes all unreachable
  # objects from the object database.
  # !WARNING!
  #   Use rebasing with caution and only for local and unpushed branches!
  #   History that got rewritten in a shared branch touched by multiple developers may break the repository!
  #   Rebasing a shared branch that others have based work on may lead to problems by forcing other users to manually
  #   fix their history.
  #
  # Usage:
  #   git plrb <REMOTE>
  # References:
  #   https://www.atlassian.com/git/articles/git-team-workflows-merge-or-rebase
  plrb = ! git pull --no-ff --rebase --prune $@

  # Pulls changes from the specified remote in fast-forward mode and prunes all unreachable objects from the object
  # database.
  # !WARNING!
  #   Use fast-forward mode with caution to prevent loss of "commit <> branch" tracking information in the history!
  #
  # Usage:
  #   git plff <REMOTE>
  plff = ! git pull --ff-only --prune $@

  # Pulls changes from the specified remote in fast-forward mode, performs a rebase and prunes all unreachable objects
  # from the object database.
  # !WARNING!
  #   Use fast-forward mode with caution to prevent loss of "commit <> branch" tracking information in the history!
  # !WARNING!
  #   Use rebasing with caution and only for local and unpushed branches!
  #   History that got rewritten in a shared branch touched by multiple developers may break the repository!
  #   Rebasing a shared branch that others have based work on may lead to problems by forcing other users to manually
  #   fix their history.
  #
  # Usage:
  #   git plffrb <REMOTE>
  # References:
  #   https://www.atlassian.com/git/articles/git-team-workflows-merge-or-rebase
  plffrb = ! git pull --rebase --ff-only --prune $@

  # +--------------------+
  # + Interaction - Push +
  # +--------------------+
  # Pushes the current branch to the default "origin" remote.
  #
  # Usage:
  #   git po
  po = push origin

  # +---------------------+
  # + Interaction - Reset +
  # +---------------------+
  # Resets to the specific commit.
  # Updates the index and does not touch the working tree.
  # Shortended reset command.
  #
  # Usage:
  #   git back <SHA1>
  back = reset

  # Undoes the last commit.
  #
  # Usage:
  #   git undo
  undo = reset HEAD~1 --mixed

  # Resets the stage.
  #
  # Usage:
  #   git unstage
  unstage = reset HEAD --

  # Hardresets to the specific commit.
  # Shortended reset command.
  # !WARNING!
  #   Any changes to tracked files in the working tree commited after the specified commit are discarded!
  #   This will reset the index and the working tree.
  #
  # Usage:
  #   git wipe <SHA1>
  wipe = reset --hard

  # +----------------------+
  # + Information - Branch +
  # +----------------------+
  # Prints all branches with abbreviated SHA1 checksum and commit message.
  #
  # Usage:
  #   git b
  b = branch --all

  # Prints only branches that have not been merged yet into the specified branch.
  # If no BRANCH is specified, the current branch is used by default.
  #
  # Usage:
  #   git bum [BRANCH]
  bum = branch --all --no-merged 

  # Prints only branches that have been merged into the specified branch.
  # If no BRANCH is specified, the current branch is used by default.
  #
  # Usage:
  #   git bm [BRANCH]
  bm = branch --all --merged

  # +-------------------+
  # + Information - Log +
  # +-------------------+
  # Prints a prettified commit log.
  #
  # Usage:
  #   git l
  # Output Format:
  #   <ABBREVIATED_SHA1> <COMMIT_MESSAGE> <REFS>
  l = log --graph --pretty=format:'%C(cyan)%h %C(white)%s %C(cyan bold)%d'

  # Lists all commits the current branch is ahead of the tracked origin branch that have not been pushed yet.
  #
  # Depends on:
  #   alias.l
  # Usage:
  #   git lahead
  lahead = ! git l @{u}..HEAD

  # Lists all ahead commits of the tracked origin branch that are not merged into the current branch yet.
  #
  # Depends on:
  #   alias.l
  # Usage:
  #   git lbehind
  lbehind = ! git l HEAD..@{u}

  # Prints a prettified flat commit log without topic commits from merges.
  #
  # Depends on:
  #   alias.l
  # Usage:
  #   git lf
  lf = ! git l --first-parent

  # Prints a extended and prettified commit log graph.
  #
  # Usage:
  #   git ll
  # Output Format:
  #   <COMMIT_SHA1> [REFS]
  #   <AUTHOR_NAME> <AUTHOR_EMAIL>
  #   <COMMIT_ISO_8601_DATE> (<RELATIVE_COMMIT_DATE>)
  #   <COMMIT_MESSAGE>
  ll = log --graph --pretty=format:'%C(cyan ul)%H%C(reset) %C(cyan bold)%d\n%C(blue bold)%an %C(black)<%C(blue)%ae%C(black)>\n%C(black bold)%ci (%C(black bold)%cr)\n%C(white)%B'

  # Prints a prettified flat commit log graph without topic commits from merges.
  #
  # Depends on:
  #   alias.ll
  # Usage:
  #   git llf
  llf = ! git ll --first-parent

  # Lists the log for all commits commited after the given tag or SHA1.
  #
  # Depends on:
  #   alias.l
  # Usage:
  #   git lch <TAG>|<SHA1>
  lch = ! git l $1..HEAD

# +----------------------+
# + Information - Status +
# +----------------------+
  # Shows the status.
  # Shortended status command.
  #
  # Usage:
  #   git s
  s = status

  # +-------------------+
  # + Information - Tag +
  # +-------------------+
  # Lists all tags handled as version strings in sorted order.
  #
  # Usage:
  #   git t
  t = tag --list --sort=version:refname

  # Creates a signed annotated tag.
  #
  # Usage:
  #   git ts <TAG>
  ts = tag --annotate --sign

  # +----------------+
  # + Query - Branch +
  # +----------------+
  # Finds all branches containing the given SHA1 checksum.
  #
  # Depends on:
  #   alias.b
  # Usage:
  #   git fb <SHA1>
  fb = ! sh -c 'git branch --contains $1' --

  # +-------------+
  # + Query - Tag +
  # +-------------+
  # Finds all tags containing the given SHA1 checksum.
  #
  # Usage:
  #   git ft <SHA1>
  ft = ! git describe --tags --contains $1

# NOTE: The following "include" statements/blocks must be applied last in order to override their initial
# blocks above, otherwise the configurations won't be overridden when placed at the top of this file!

# Apply workaround to fix exit code handling for IntelliJ as merge tool when running on macOS.
[include]
  path = ./includes/macos_mergetool_exit_code_fix.conf

# Use a different commit message template for job related repositories.
[includeIf "gitdir:~/code/job/"]
  path = ./includes/commit_template-job.conf
